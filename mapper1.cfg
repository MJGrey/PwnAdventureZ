MEMORY {
    ZERO:   file = "", start = $0000, size = $0100, type = rw;
	STACK:  file = "", start = $0100, size = $0100, type = rw;

    # INES Cartridge Header
    HEADER: file = %O, start = $0000, size = $0010, fill = yes;

    # First ROM bank contains game code that doesn't always need to
    # be in memory (i.e. not called from an interrupt handler or
    # during tile copying)
    ROM0:   file = %O, start = $8000, size = $4000, fill = yes, bank = 0;

    # 6 PRG ROM banks for tiles
    CHR1:   file = %O, start = $8000, size = $4000, fill = yes, bank = 1;
    CHR2:   file = %O, start = $8000, size = $4000, fill = yes, bank = 2;
    CHR3:   file = %O, start = $8000, size = $4000, fill = yes, bank = 3;
    CHR4:   file = %O, start = $8000, size = $4000, fill = yes, bank = 4;
    CHR5:   file = %O, start = $8000, size = $4000, fill = yes, bank = 5;
    CHR6:   file = %O, start = $8000, size = $4000, fill = yes, bank = 6;

    # Last ROM bank is always loaded
    FIXED:  file = %O, start = $C000, size = $3FFA, fill = yes, bank = 7;
    VECTOR: file = %O, start = $FFFA, size = $0006, fill = yes, bank = 7;

    # standard 2k SRAM (-zeropage)
    # $0100-$0200 cpu stack
    SPRITE: file = "", start = $0200, size = $0100;
    RAM:    file = "", start = $0300, size = $0500;

    # Save RAM
    SRAM:   file = "", start = $6000, size = $2000, fill = yes;
}
SEGMENTS {
    HEADER:   load = HEADER,          type = ro;
    CODE:     load = ROM0,            type = ro;
    RODATA:   load = ROM0,            type = ro;
    DATA:     load = FIXED,           type = ro;
    FIXED:    load = FIXED,           type = ro;
    VECTORS:  load = VECTOR,          type = ro;
    BSS:      load = RAM,             type = rw;
    SPRITE:   load = SPRITE,          type = rw;
    CHR1:     load = CHR1,            type = ro;
    CHR2:     load = CHR2,            type = ro;
    CHR3:     load = CHR3,            type = ro;
    CHR4:     load = CHR4,            type = ro;
    CHR5:     load = CHR5,            type = ro;
    CHR6:     load = CHR6,            type = ro;
    ZEROPAGE: load = ZERO,            type = zp;
    STACK:    load = STACK,           type = rw;
    SRAM:     load = SRAM,            type = rw;
}

